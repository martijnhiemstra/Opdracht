package nl.humaninference.person.repository;

import static org.assertj.core.api.Assertions.assertThat;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.test.context.junit4.SpringRunner;

import nl.humaninference.person.entity.Department;
import nl.humaninference.person.entity.Person;
import nl.humaninference.person.entity.PersonStatus;

// We need @RunWith(SpringRunner.class) to ensure we can inject the IPersonRepository. Otherwise personRepository will be null
@RunWith(SpringRunner.class)
@DataJpaTest
public class PersonRepositoryTest {

	@Autowired
	private IPersonRepository personRepository;

	// This test isn't really needed sine findAll is generated by spring. I have added it so that we can verify that the 
	// data.sql is correctly loaded
    @Test
    public void test_findAll() {
    	List<Person> persons = personRepository.findAll();

        assertThat(persons).isNotNull();
        assertThat(persons.size()).isEqualTo(10);
    }

	@Test
	public void test_findById() {
		Optional<Person> personOptional = personRepository.findById(1L);

		assertThat(personOptional.isPresent()).isEqualTo(true);
		assertThat(personOptional.get().getId()).isEqualTo(1);
		assertThat(personOptional.get().getName()).isEqualTo("John Doe");
	}

	@Test
	public void test_specification_findbyname() {
		Pageable pageable = PageRequest.of(0, 20);
		
		Page<Person> persons = personRepository.findAll(PersonSpecifications.search("John", null, null, null, null, null), pageable);
		
		assertThat(persons.getContent().size()).isEqualTo(2);
		assertThat(persons.getContent().get(0).getName()).isEqualTo("John Doe");
		assertThat(persons.getContent().get(1).getName()).isEqualTo("Alice Johnson");
	}

	@Test
	public void test_specification_findbyname_empty() {
		Pageable pageable = PageRequest.of(0, 20);

		Page<Person> persons = personRepository.findAll(PersonSpecifications.search("", null, null, null, null, null), pageable);

		assertThat(persons.getContent().size()).isEqualTo(10);
		assertThat(persons.getContent().get(0).getId()).isEqualTo(1L);
		assertThat(persons.getContent().get(1).getId()).isEqualTo(2L);
		assertThat(persons.getContent().get(2).getId()).isEqualTo(3L);
	}

	@Test
	public void test_specification_pagination() {
		// 2nd page with 3 records
		Pageable pageable = PageRequest.of(1, 3);

		Page<Person> persons = personRepository.findAll(PersonSpecifications.search(null, null, null, null, null, null), pageable);

		assertThat(persons.getContent().size()).isEqualTo(3);
		assertThat(persons.getContent().get(0).getId()).isEqualTo(4);
		assertThat(persons.getContent().get(1).getId()).isEqualTo(5);
		assertThat(persons.getContent().get(2).getId()).isEqualTo(6);
	}

	@Test
	public void test_specification_findbysalary() {
		Pageable pageable = PageRequest.of(0, 20);
		
		Page<Person> persons = personRepository.findAll(PersonSpecifications.search(null, null, 5000.0, 6000.0, null, null), pageable);
		
		assertThat(persons.getContent().size()).isEqualTo(4);
		assertThat(persons.getContent().get(0).getId()).isEqualTo(1);
		assertThat(persons.getContent().get(1).getId()).isEqualTo(4);
		assertThat(persons.getContent().get(2).getId()).isEqualTo(7);
		assertThat(persons.getContent().get(3).getId()).isEqualTo(10);
	}
	
	@Test
	public void test_specification_department() {
		Pageable pageable = PageRequest.of(0, 20);
		
		Department department = new Department();
		department.setId(2);
		
		Page<Person> persons = personRepository.findAll(PersonSpecifications.search(null, department, null, null, null, null), pageable);
		
		assertThat(persons.getContent().size()).isEqualTo(2);
		assertThat(persons.getContent().get(0).getId()).isEqualTo(2);
		assertThat(persons.getContent().get(1).getId()).isEqualTo(7);
	}

	@Test
	public void test_specification_status() {
		// Set to 2 records on the first page to test that status and pageable work together
		Pageable pageable = PageRequest.of(0, 2);

		Page<Person> persons = personRepository.findAll(PersonSpecifications.search(null, null, null, null, PersonStatus.TERMINATED, null), pageable);

		assertThat(persons.getContent().size()).isEqualTo(2);
		assertThat(persons.getContent().get(0).getId()).isEqualTo(7);
		assertThat(persons.getContent().get(1).getId()).isEqualTo(8);
	}

	@Test
	public void test_specification_startDate() {
		Pageable pageable = PageRequest.of(0, 20);

		LocalDateTime startDate = LocalDateTime.of(2023, 1, 1, 0, 0);

		Page<Person> persons = personRepository.findAll(PersonSpecifications.search(null, null, null, null, null, startDate), pageable);

		assertThat(persons.getContent().size()).isEqualTo(2);
		assertThat(persons.getContent().get(0).getId()).isEqualTo(1);
		assertThat(persons.getContent().get(1).getId()).isEqualTo(10);
	}
}
